<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-Type" content="text/html; charset=utf-8"/>
  <title>RUVIS - visualization of molecular dynamics simulations</title>
  <style>
    html, body {
      overflow: hidden;
      width: 100%;
      height: 100%;
      margin: 0;
      padding: 0;
    }

    #renderCanvas {
      width: 100%;
      height: 100%;
      touch-action: none;
    }
  </style>
  <script src="babylon.2.3.js"></script>
</head>
<body>
  <div id="loadingText"><p>Loading trajectory ...</p></div>
  <script src="xyz.js"></script>
  <script>document.getElementById('loadingText').style.display="none"</script>
  <canvas id="renderCanvas"></canvas>

<script> 
var animate=true;
var requestAnimateUpdate=false;

var step=0;
var animateStride=1;
var frame=0;

var newCameraRadius=30;
var requestCameraRadius=false;

var frames = (xyz.length)/(4*N);
console.log("Start RUVIS: N = " + N + " frames = " + frames);
window.addEventListener('DOMContentLoaded', function() {
	var canvas = document.getElementById('renderCanvas');
	var engine = new BABYLON.Engine(canvas, true);
	var createScene = function () {
		var scene = new BABYLON.Scene(engine);

		//Create a lights
		
		var light = new BABYLON.PointLight("Omni", new BABYLON.Vector3(-60, 60, 80), scene);
		light.intensity = 0.5;

		var light1 = new BABYLON.HemisphericLight("Hemi", new BABYLON.Vector3(0, 1, 0), scene);
		light1.intensity = 0.7;

		//var light2 = new BABYLON.DirectionalLight("dir01", new BABYLON.Vector3(-1, -2, -1), scene);
		//light2.position = new BABYLON.Vector3(20, 40, 20);
		//light2.intensity = 0.3;

		var light3 = new BABYLON.DirectionalLight("dir02", new BABYLON.Vector3(1, 2, 1), scene);
		light3.position = new BABYLON.Vector3(-40, -80, -40);
		light3.intensity = 0.2;
		
		
		//Create an Arc Rotate Camera - aimed negative z this time
		var camera = new BABYLON.ArcRotateCamera("Camera", Math.PI / 2, 1.0, newCameraRadius, BABYLON.Vector3.Zero(), scene);
		camera.attachControl(canvas, true, true);
		//camera.attachControl(canvas, false);
		//camera.collisionRadius = new BABYLON.Vector3(2.0, 2.0, 2.0);
		/* EXample on orthographic camera
		camera.mode = BABYLON.Camera.ORTHOGRAPHIC_CAMERA;
		camera.orthoTop = 5;
		camera.orthoBottom = -5;
    		camera.orthoLeft = -5;
    		camera.orthoRight = 5; 
		*/

		// Create materials
		var materialType = [];
		for(var type=0;type<types;type++){
			materialType[type] = new BABYLON.StandardMaterial("texture_type" + type, scene);
			materialType[type].diffuseColor = color[type];
			
			//materialType[type].alpha = 1.0;
		}
		
		// Create spheres
		var sphere = [];
		for(var i=0;i<N;i++){
			var type= xyz[4*i+0];
			var x	= xyz[4*i+1];
			var y	= xyz[4*i+2];
			var z	= xyz[4*i+3];
			sphere[i] = BABYLON.Mesh.CreateSphere("Atom" + i, 6, diameter[type], scene);
			sphere[i].position = new BABYLON.Vector3(x, y, z);
			sphere[i].material = materialType[type];
			//console.log("Created sphere "+i+": type="+type+" ")
		}

		// Create boundary box
		// Creation of a lines mesh
		var lines = BABYLON.Mesh.CreateLines("lines", [
			new BABYLON.Vector3(bbox[0], bbox[1], bbox[2]),
			new BABYLON.Vector3(bbox[0+3], bbox[1], bbox[2]),
			new BABYLON.Vector3(bbox[0+3], bbox[1+3], bbox[2]),
			new BABYLON.Vector3(bbox[0], bbox[1+3], bbox[2]),
			new BABYLON.Vector3(bbox[0], bbox[1], bbox[2]),
			new BABYLON.Vector3(bbox[0], bbox[1], bbox[2+3]),
			new BABYLON.Vector3(bbox[0+3], bbox[1], bbox[2+3]),
			new BABYLON.Vector3(bbox[0+3], bbox[1+3], bbox[2+3]),
			new BABYLON.Vector3(bbox[0], bbox[1+3], bbox[2+3]),
			new BABYLON.Vector3(bbox[0], bbox[1], bbox[2+3]),
			new BABYLON.Vector3(bbox[0], bbox[1+3], bbox[2+3]),
			new BABYLON.Vector3(bbox[0], bbox[1+3], bbox[2]),
			new BABYLON.Vector3(bbox[0+3], bbox[1+3], bbox[2]),
			new BABYLON.Vector3(bbox[0+3], bbox[1+3], bbox[2+3])
		], scene);
		
		// Animate particle positions
		scene.registerBeforeRender(function () {
			if(requestCameraRadius){
				camera.radius = newCameraRadius;	// TODO make a moveTowards function
				requestCameraRadius=false;
			}else{
				newCameraRadius = camera.radius;
			}
			step++;
			if((animate && step%animateStride==0) || requestAnimateUpdate){
				requestAnimateUpdate=false;
				if(animate){
					frame++;
					frame%=frames;
				}
				//console.log(frame);
				for(var i=0;i<N;i++) {
					var first = 4*(i+frame*N);
					var type= xyz[first+0];
					var x	= xyz[first+1];
					var y	= xyz[first+2];
					var z	= xyz[first+3];
					sphere[i].position = new BABYLON.Vector3(xyz[first+1], xyz[first+2], xyz[first+3]);
					sphere[i].material = materialType[type];
				}
			}
		});
	
		return scene;
	};

	var scene = createScene();

	engine.runRenderLoop(function() {
		scene.render();
	});

	window.addEventListener('resize', function() {
		engine.resize();
	});


});

// Set keyboard shortcuts
document.body.onkeyup = function(e){
	var key = String.fromCharCode(e.keyCode)
	console.log('Pressed ' + key +  ' keycode ' + e.keyCode )
	if(e.keyCode == 73){  // i for Information on 
		alert('        ..:: Keyboard shortcuts ::..\n' + 
			'i: Display this information.\n' +
			'Arrow keys: Rotate.\n' +
			's and a: Zoom in and out.\n' +
			'Spacebar or h: Halt/run animation.\n' +
			'h, j, k, and l: Set animation speed.\n' +
			'z or x: Goto first or last frame.\n' +
			'v, b, n, and m: Step through animation.\n'
		);
	} else if(e.keyCode == 83 ) {	// Zoom in
		newCameraRadius /= 1.1;
		requestCameraRadius=true;
		console.log('newCameraRadius=' + newCameraRadius);
	} else if(e.keyCode == 65 ) {	// Zoom out
		newCameraRadius *= 1.1;
		requestCameraRadius=true;
		console.log('newCameraRadius=' + newCameraRadius);
	} else if(e.keyCode == 32 || e.keyCode == 72 ) {	// Start/stop animation
		if(animate){
			animate=false;
		}else{
			animate=true;
		}
		console.log('animate=' + animateStride);
	} else if (e.keyCode == 74) {				// Slowdown
		animate=true;
		animateStride*=2;
		console.log('animate=' + animateStride);
		console.log('animateStride=' + animateStride);
	} else if (e.keyCode == 75) {				// Speedup
		animate=true;
		if(animateStride>1){
	                animateStride/=2;
		}
		console.log('animate=' + animateStride);
		console.log('animateStride=' + animateStride);
	} else if (e.keyCode == 76) {				// Set to max speed
		animate=true;
		animateStride=1;
	} else if (e.keyCode == 78) {				// Next frame
		animate=false;
		frame=(++frame)%frames;
		console.log('frame: ' + frame);
		requestAnimateUpdate=true;
	} else if (e.keyCode == 66) {				// Back a frame
		animate=false;
		if(--frame<0){frame=frames-1}
                console.log('frame: ' + frame);
                requestAnimateUpdate=true;
	} else if (e.keyCode == 77) {				// 20 forward 
		animate=false;
		frame+=20;
		if(frame>frames-1){frame=frames-1};
		console.log('frame: ' + frame);
		requestAnimateUpdate=true;
	} else if (e.keyCode == 86) {				// 20 back
		animate=false;
		frame-=20;
		if(--frame<0){frame=0}
                console.log('frame: ' + frame);
                requestAnimateUpdate=true;
	} else if (e.keyCode == 90) {				// Goto first frame
		animate=false;
		frame=0;
                console.log('frame: ' + frame);
                requestAnimateUpdate=true;
	} else if (e.keyCode == 88) {				// Goto last frame
		animate=false;
		frame=frames-1;
                console.log('frame: ' + frame);
                requestAnimateUpdate=true;
	}
}


</script>

</body>
</html>
